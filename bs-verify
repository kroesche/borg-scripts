#!/usr/bin/env bash
#
# SPDX-License-Identifier: MIT
#
# Copyright 2025 Joseph Kroesche
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
VER="0.3"

verbose=0
_fullpath="$(realpath "$0")"
SCRIPT_DIR="$(dirname "${_fullpath}")"

usage() {
    cat <<USAGE

Verify borg backups.

Usage:
  bs-verify  -a ARCHIVE -e EXTRACT_PATH [ -t HOST_ROOT ] [ -n ]
  bs-verify -i EXTRACT_ID -t HOST_PATH [ -n ]
  bs-verify -l
  bs-verify -s EXTRACT_ID
  bs-verify -c EXTRACT_ID
  bs-verify -V
  bs-verify -h

Options:
  -a ARCHIVE        name of archive for extraction (use 'borg list')
  -e EXTRACT_PATH   the file system path used for extraction and verification
  -i EXTRACT_ID     numerical ID of an extracted data set, see '-l'
  -t HOST_ROOT      the top level path in the host file system for verification
  -n                show all output from checksum verification (n for noisy)
                    otherwise only errors are displayed
  -l                list all cached extracted data sets
  -c EXTRACT_ID     delete all saved data for the specified ID, see '-l'
  -s EXTRACT_ID     show all details of a particular extracted backup set
  -v                verbose - show extra debugging messages (must be first opt)
  -V                show version
  -h                show help

Example:

  bs-verify -a home-20254-12-15T22:15 -e Users/joe/Documents/records -t /

See the man page for more details and examples.

USAGE
}

# print a thing if verbose is enabled
# $1 - string to print
dbg_print()
{
    local msg
    msg="$1"
    if [ "${verbose}" -eq 1 ]
    then
        echo "${msg}"
    fi
}

# determine where to look for configuration stuff
# order of precedence
# - BS_SCRIPTS_CONFIG - user defines in the environment, use this if defined
# - CWD - if starting dir contains bs-repo.cfg, use that for config
# - XDG_CONFIG_HOME/bs-scipts - if defined use this location
# - ~/.config/bs-scripts - look here by default if nothing else defined
# - script dir - final fallback
#
# sets BS_SCRIPTS_CONFIG and REPO_CONFIG_FILE
get_config()
{
    dbg_print "Determining configuration files location ..."
    if [ -n "${BS_SCRIPTS_CONFIG}" ]
    then
        # preferred config dir is in the env
        dbg_print "Using user defined BS_SCRIPTS_CONFIG as config location"
    elif [ -f "bs-repo.cfg" ]
    then
        # found a repo config in the current dir, use that
        BS_SCRIPTS_CONFIG="$(pwd)"
        dbg_print "Using current directory for configuration"
    elif [ -n "${XDG_CONFIG_HOME}" ] && [ -f "${XDG_CONFIG_HOME}/bs-scripts/bs-repo.cfg" ]
    then
        # XDG_CONFIG_HOME exists, so if repo config is there, use that
        BS_SCRIPTS_CONFIG="${XDG_CONFIG_HOME}/bs-scripts"
        dbg_print "Using XDG_CONFIG_HOME for configuration"
    elif [ -f "${HOME}/.config/bs-scripts/bs-repo.cfg" ]
    then
        # found repo config in ~/.config ...
        BS_SCRIPTS_CONFIG="$(realpath "${HOME}")/.config/bs-scripts"
        dbg_print "Using local config"
    else
        # try the scripts dir
        BS_SCRIPTS_CONFIG="$(realpath "${SCRIPT_DIR}")"
        dbg_print "Using scripts dir"
    fi

    dbg_print "I think my configuration is here:"
    dbg_print "[${BS_SCRIPTS_CONFIG}]"
    REPO_CONFIG_FILE="${BS_SCRIPTS_CONFIG}/bs-repo.cfg"
    if [ -f "${REPO_CONFIG_FILE}" ]
    then
        dbg_print "Using config: ${REPO_CONFIG_FILE}"
    else
        echo "I could not find configuration file:"
        echo "[${REPO_CONFIG_FILE}]"
        exit 1
    fi

    # get the log file config from repo config file
    # REPO_CONFIG_FILE is known to exist at this point
    . "${REPO_CONFIG_FILE}"
    if [ -z "${BS_VERIFY_CFG_PATH}" ]
    then
        echo "BS_VERIFY_CFG_PATH is not defined"
        exit 1
    else
        dbg_print "Using BS_VERIFY_CFG_PATH: ${BS_VERIFY_CFG_PATH}"
    fi
}

set -e
shopt -s inherit_errexit

# compare two trees and list different files
# $1 - from path (the original tree)
# $2 - compare path (the extracted backup files)
compare_trees()
{
    local originals extracts output
    originals="$1/"
    extracts="$2/"
    echo "-----------------------"
    echo "Originals: ${originals}"
    echo "Extracted: ${extracts}"
    echo "-----------------------"
    output=$(rsync -Rrnc --out-format="%f" "${originals}" "${extracts}")
    if [ -z "${output}" ]
    then
        echo "All files verified"
        return 0
    else
        echo "The following files are missing or changed in the backup data:"
        echo "${output}"
        return 1
    fi
}

# given an ID input (which is probably a number), return a file name
# $1 - ID
cfg_filename_from_id()
{
    echo "${BS_VERIFY_CFG_PATH}/extract_$1.cfg"
}

# get a file to be used for the data file storage
# just uses an incrementing pattern
# returns the id of the file
create_cfg_file_id()
{
    local i filename
    for i in {0..99}
    do
        filename=$(cfg_filename_from_id "${i}")
        if [ ! -e "${filename}" ]
        then
            touch "${filename}"
            #echo "Generated data file name: ${filename}"
            echo "${i}"
            return
        fi
    done
    echo "Error: could not generate a file name for the data file"
    exit 1
}

# extract a subset of data from a borg backup archive
# $1 - archive name
# $2 - path to extract
#
# returns - extraction ID, can be used elsewere
#
# creates an extraction config file in the BS_VERIFY_CFG_PATH that contains info
# about this extraction, and returns an ID referencing that file
extract_backup()
{
    local archive_name extract_path timestamp cfgid cfgfile tempdir saved_cwd
    # extract_id is kept global because it is needed in another part of
    # the script
    archive_name=$1
    extract_path=$2
    timestamp=$({ date -Iminutes || true; } |cut -d - -f1-3)
    tempdir=$(mktemp -d)
    cfgid=$(create_cfg_file_id)
    cfgfile=$(cfg_filename_from_id "${cfgid}")
    {
        echo "TIMESTAMP=${timestamp}"
        echo "ARCHIVE=\"${archive_name}\""
        echo "EXTRACT_PATH=\"${extract_path}\""
        echo "TEMPDIR=${tempdir}"
    } > "${cfgfile}"
    extract_id=${cfgid}
    echo "Extracting borg backup archive: ${archive_name} ; path: ${extract_path}"

    # source the repo config to get the repo location and credentials
    # these just go into the environment and are used by borg
    # this step assumes we are in the bs-scripts config directory, which
    # should have happened before this fn was called
    if [ -f "${REPO_CONFIG_FILE}" ]
    then
        . "${REPO_CONFIG_FILE}"
    else
        echo "Error loading repo config file"
        exit 1
    fi
    # call borg to do the extract (assumes on the path)
    saved_cwd=$(pwd)
    if [ -d "${tempdir}" ]
    then
        cd "${tempdir}"
    else
        echo "Error switching to temporary directory for archive extraction"
        exit 1
    fi
    borg extract -v --debug  "${BORG_REPO}::${archive_name}" "${extract_path}"
}

# list all of the saved test configurations
list_extracts()
{
    local id
    for id in {0..99}
    do
        filename=$(cfg_filename_from_id "${id}")
        if [ -e "${filename}" ]
        then
            . "${filename}"
            echo "${id}: ${TIMESTAMP:?missing} | ${ARCHIVE:?missing} | ${EXTRACT_PATH:?missing}"
        fi
    done
}

# delete a saved test configuration and all the cached data
# this can be used to clean up an extracted backup set after the test
# is finished.
# $1 - test config ID to clean (use -l to see list)
clean() {
    local id=$1
    filename=$(cfg_filename_from_id "${id}")
    if [ -e "${filename}" ]
    then
        . "${filename}"
        if [ -n "${TEMPDIR}" ]
        then
            echo "Attempting to remove temporary directory of extracted backup ..."
            echo "${TEMPDIR}"
            rm -rf "${TEMPDIR}"
            echo "Removing metadata file"
            rm -f "${filename}"
        else
            echo "Something went wrong, cannot find TEMPDIR"
            exit 1
        fi
    fi
}

# print a summary of test configuration data
# $1 - test config ID (use -l for list)
summarize() {
    local id=$1
    filename=$(cfg_filename_from_id "${id}")
    if [ -e "${filename}" ]
    then
        . "${filename}"
        echo ""
        echo "----------------------"
        echo "Summary of test set: ${id}"
        echo "----------------------"
        echo "Extracted:  ${TIMESTAMP}"
        echo "Archive:    ${ARCHIVE}"
        echo "Path:       ${EXTRACT_PATH}"
        echo "Location:   ${TEMPDIR}"
        echo "----------------------"
        echo "Storage Usage of Extracted Files:"
        du -d 0 -h "${TEMPDIR}"
    fi
}

# process command line
# if no options are passed in, then show help
if [ $# = 0 ]
then
    usage
    exit 0
fi

# support --help since that is common
if [ "$1" = "--help" ]
then
    usage
    exit 0
fi

while getopts ":a:e:t:i:nc:s:lvVh" opt; do
    case ${opt} in
        h)
            usage
            exit 0
            ;;
        V)
            echo "bs-verify from bs-scripts package ${VER}"
            echo "https://github.com/kroesche/bs-scripts"
            exit 0
            ;;
        v)
            verbose=1
            ;;
        l)
            get_config
            list_extracts
            exit 0
            ;;
        i)
            extract_id=${OPTARG}
            ;;
        e)
            extract_path=${OPTARG}
            ;;
        a)
            archive=${OPTARG}
            ;;
        t)
            host_root="${OPTARG}"
            ;;
        n)
            noisy="y"
            ;;
        c)
            get_config
            clean_id=${OPTARG}
            clean "${clean_id}"
            exit 0
            ;;
        s)
            get_config
            summarize_id=${OPTARG}
            summarize "${summarize_id}"
            exit 0
            ;;
        :)
            echo "Option -${OPTARG} requires an argument"
            exit 1
            ;;
        ?)
            echo "Invalid option: -${OPTARG}"
            exit 1
            ;;
        *)
            echo "optargs error"
            exit 1
            ;;
    esac
done

# determine config file location
get_config

# user is requesting an extract
if [ -n "${extract_path}" ]
then
    # check that an archive has been specified
    if [ -n "${archive}" ]
    then
        echo "Extracting a backup using the following ..."
        echo "Archive:      ${archive}"
        echo "Extract path: ${extract_path}"
        extract_backup "${archive}" "${extract_path}"
        extract_err=$?
    else
        echo "In order to extract (-e) you must specify an archive (-a)"
        exit 1
    fi
elif [ -n "${archive}" ]
then
    echo "Using -a by itself does nothing. You must also use -e"
    exit 1
fi

# user is requested an integrity test
# this generates a set of sums over the host side data to be tested
# then it verifies those sums on the extracted backup data
# this allows detection of files present on host but not in backup, as
# well as flagging any differences
if [ -n "${host_root}" ]
then
    # use the extract_id to figure the paths, etc
    # the extract_id either came from -i, or from the extract
    if [ -n "${extract_id}" ]
    then
        cfgfile=$(cfg_filename_from_id "${extract_id}")
        . "${cfgfile}"
        compare_trees "${EXTRACT_PATH}" "${TEMPDIR}"
        exit 0
    else
        echo "In order to verify (-t) you need to either extract (-e/-a) or"
        echo "specify a test ID (-i) of a previously extracted backup"
        exit 1
    fi
elif [ -n "${extract_path}" ]
then
    # in case we get here, as long as an extract was performed, this can be
    # a normal exit
    exit ${extract_err}
elif [ -n "${extract_id}" ]
then
    echo "Using -i alone does nothing. You also need -t"
    exit 1
fi

# logical path that should not occur
echo "I somehow ended up at the end of the script with nothing to do!"
echo "There may be a bug in the script."
exit 1
