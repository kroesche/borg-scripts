#!/usr/bin/env bash
#
# SPDX-License-Identifier: MIT
#
# Copyright 2025 Joseph Kroesche
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
VER="0.3"

usage() {
    cat <<USAGE

Verify borg backups.

Usage:
  bs-verify -a ARCHIVE -e EXTRACT_PATH [ -t HOST_ROOT ] [ -n ]
  bs-verify -i EXTRACT_ID -t HOST_PATH [ -n ]
  bs-verify -l
  bs-verify -s EXTRACT_ID
  bs-verify -c EXTRACT_ID
  bs-verify -v
  bs-verify -h

Options:
  -a ARCHIVE        name of archive for extraction (use 'borg list')
  -e EXTRACT_PATH   the file system path used for extraction and verification
  -i EXTRACT_ID     numerical ID of an extracted data set, see '-l'
  -t HOST_ROOT      the top level path in the host file system for verification
  -n                show all output from checksum verification (n for noisy)
                    otherwise only errors are displayed
  -l                list all cached extracted data sets
  -c EXTRACT_ID     delete all saved data for the specified ID, see '-l'
  -s EXTRACT_ID     show all details of a particular extracted backup set
  -v                show version
  -h                show help

Example:

  bs-verify -a home-20254-12-15T22:15 -e Users/joe/Documents/records -t /

See the man page for more details and examples.

USAGE
}

# repo configuration, path to repo and credentials
# assumes in bs-scripts config directory
REPO_CONFIG="bs-repo.cfg"

# where extract configurations are saved
# TODO make this configurable
CFG_PATH=~/.local/share/bs-scripts

set -e

# generate checksums for a directory tree
# $1 - root location for generating the sums, script will cd here
# $2 - path over which to generate checksums
# $3 - location of checksum file
#
# example:
#   root location - /
#   path - Users/joe/Documents
#   file - (temp file where sums are saved)
generate_sums()
{
    local root sumfile saved_cwd sumpath

    root=$1
    sumpath=$2
    sumfile=$3
    saved_cwd=$(pwd)
    cd ${root}
    rm -f ${sumfile}
    echo "Generating sums for: ${root} / ${sumpath}"
    find "${sumpath}" -type f -exec sha256sum "{}" >> ${sumfile} \;
    cd ${saved_cwd}
}

# verify previously saved checksums on a directory tree
# $1 - root location of the files to check
# $2 - location of checksum file
# $3 - noisy flag - show all checksum output (otherwise only errors)
verify_sums()
{
    local root sumfile saved_cwd
    echo "Verifying sums ..."
    root=$1
    sumfile=$2
    saved_cwd=$(pwd)
    cd ${root}
    if [ "${3}" == "y" ]
    then
        sha256sum --check ${sumfile}
    else
        # filter out all the "OK" lines
        sha256sum --check ${sumfile} | grep -v "OK"
    fi
    cd ${saved_cwd}
}

# given an ID input (which is probably a number), return a file name
# $1 - ID
cfg_filename_from_id()
{
    echo ${CFG_PATH}/extract_$1.cfg
}

# get a file to be used for the data file storage
# just uses an incrementing pattern
# returns the id of the file
create_cfg_file_id()
{
    local i filename
    for i in {0..99}
    do
        filename=$(cfg_filename_from_id ${i})
        if [ ! -e ${filename} ]
        then
            touch ${filename}
            #echo "Generated data file name: ${filename}"
            echo ${i}
            return
        fi
    done
    echo "Error: could not generate a file name for the data file"
    exit 1
}

# extract a subset of data from a borg backup archive
# $1 - archive name
# $2 - path to extract
#
# returns - extraction ID, can be used elsehwere
#
# creates an extraction config file in the CFG_PATH that contains info
# about this extraction, and returns an ID referencing that file
extract_backup()
{
    local archive_name extract_path timestamp cfgid cfgfile tempdir saved_cwd
    archive_name=$1
    extract_path=$2
    timestamp=$(date -Iminutes|cut -d - -f1-3)
    tempdir=$(mktemp -d)
    cfgid=$(create_cfg_file_id)
    cfgfile=$(cfg_filename_from_id ${cfgid})
    echo "TIMESTAMP=${timestamp}" > ${cfgfile}
    echo "ARCHIVE=\"${archive_name}\"" >> ${cfgfile}
    echo "EXTRACT_PATH=\"${extract_path}\"" >> ${cfgfile}
    echo "TEMPDIR=${tempdir}" >> ${cfgfile}
    extract_id=${cfgid}
    echo "Extracting borg backup archive: ${archive_name} ; path: ${extract_path}"

    # source the repo config to get the repo location and credentials
    # these just go into the environment and are used by borg
    # this step assumes we are in the bs-scripts config directory, which
    # should have happened before this fn was called
    if [ -f ${REPO_CONFIG} ]
    then
        . ${REPO_CONFIG}
    else
        echo "Error loading repo config file"
        exit 1
    fi
    # call borg to do the extract (assumes on the path)
    saved_cwd=$(pwd)
    if [ -d ${tempdir} ]
    then
        cd ${tempdir}
    else
        echo "Error switching to temporary directory for archive extraction"
        exit 1
    fi
    borg extract ::${archive_name} "${extract_path}"
}

# list all of the saved test configurations
list_extracts()
{
    local id
    for id in {0..99}
    do
        filename=$(cfg_filename_from_id ${id})
        if [ -e ${filename} ]
        then
            . ${filename}
            echo "${id}: ${TIMESTAMP} | ${ARCHIVE} | ${EXTRACT_PATH}"
        fi
    done
}

# delete a saved test configuration and all the cached data
# this can be used to clean up an extracted backup set after the test
# is finished.
# $1 - test config ID to clean (use -l to see list)
clean() {
    local id=$1
    filename=$(cfg_filename_from_id ${id})
    if [ -e ${filename} ]
    then
        . ${filename}
        echo "Attempting to remove temporary directory of extracted backup ..."
        echo ${TEMPDIR}
        rm -rf ${TEMPDIR}
        echo "Removing metadata file"
        rm -f ${filename}
    fi
}

# print a summary of test configuration data
# $1 - test config ID (use -l for list)
summarize() {
    local id=$1
    filename=$(cfg_filename_from_id ${id})
    if [ -e ${filename} ]
    then
        . ${filename}
        echo ""
        echo "----------------------"
        echo "Summary of test set: ${id}"
        echo "----------------------"
        echo "Extracted:  ${TIMESTAMP}"
        echo "Archive:    ${ARCHIVE}"
        echo "Path:       ${EXTRACT_PATH}"
        echo "Location:   ${TEMPDIR}"
        echo "----------------------"
        echo "Storage Usage of Extracted Files:"
        du -d 0 -h ${TEMPDIR}
    fi
}

# process command line
# if no options are passed in, then show help
if [ $# = 0 ]
then
    usage
    exit 0
fi

# support --help since that is common
if [ "$1" = "--help" ]
then
    usage
    exit 0
fi

# switch to script directory
cd "$(dirname "$0")"

while getopts ":a:e:t:i:nc:s:lvh" opt; do
    case ${opt} in
        h)
            usage
            exit 0
            ;;
        v)
            echo "bs-verify from bs-scripts package ${VER}"
            echo "https://github.com/kroesche/bs-scripts"
            exit 0
            ;;
        l)
            list_extracts
            exit 0
            ;;
        i)
            extract_id=${OPTARG}
            ;;
        e)
            extract_path=${OPTARG}
            ;;
        a)
            archive=${OPTARG}
            ;;
        t)
            host_root="${OPTARG}"
            ;;
        n)
            noisy="y"
            ;;
        c)
            clean_id=${OPTARG}
            clean ${clean_id}
            exit 0
            ;;
        s)
            summarize_id=${OPTARG}
            summarize ${summarize_id}
            exit 0
            ;;
        :)
            echo "Option -${OPTARG} requires an argument"
            exit 1
            ;;
        ?)
            echo "Invalid option: -${OPTARG}"
            exit 1
            ;;
    esac
done

# user is requesting an extract
if [ -n "${extract_path}" ]
then
    # check that an archive has been specified
    if [ -n "${archive}" ]
    then
        echo "Extracting a backup using the following ..."
        echo "Archive:      ${archive}"
        echo "Extract path: ${extract_path}"
        extract_backup ${archive} "${extract_path}"
    else
        echo "In order to extract (-e) you must specify an archive (-a)"
        exit 1
    fi
elif [ -n "${archive}" ]
then
    echo "Using -a by itself does nothing. You must also use -e"
    exit 1
fi

# user is requested an integrity test
# this generates a set of sums over the host side data to be tested
# then it verifies those sums on the extracted backup data
# this allows detection of files present on host but not in backup, as
# well as flagging any differences
if [ -n "${host_root}" ]
then
    # use the extract_id to figure the paths, etc
    # the extract_id either came from -i, or from the extract
    if [ -n "${extract_id}" ]
    then
        cfgfile=$(cfg_filename_from_id ${extract_id})
        . ${cfgfile}
        generate_sums ${host_root} "${EXTRACT_PATH}" ${TEMPDIR}/sums.txt
        verify_sums ${TEMPDIR} ${TEMPDIR}/sums.txt ${noisy}
        exit $?
    else
        echo "In order to verify (-t) you need to either extract (-e/-a) or"
        echo "specify a test ID (-i) of a previously extracted backup"
        exit 1
    fi
elif [ -n "${extract_id}" ]
then
    echo "Using -i alone does nothing. You also need -t"
    exit 1
fi

echo "I somehow ended up at the end of the script with nothing to do!"
echo "There may be a bug in the script."
exit 1
