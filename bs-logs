#!/bin/sh
#
# SPDX-License-Identifier: MIT
#
# Copyright 2024-2025 Joseph Kroesche
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# this script is used for setting up a launch agent on macos, so it has
# macos specific stuff in it and wont work on non-mac

VER="0.3"

verbose=0
_fullpath="$(realpath "$0")"
SCRIPT_DIR="$(dirname "${_fullpath}")"

usage()
{
    cat <<USAGE

Process bs-backup log.

Usage:
  bs-logs -l
  bs-logs -s SET_ID
  bs-logs -x SET_ID [ -e | -m | -a ]
  bs-logs -d SET_ID
  bs-logs -p N
  bs-logs -V
  bs-logs -h

Options:
  -l            list backup sets appearing in the log, shows SET_ID for each
  -s SET_ID     summarize specific backup set
  -x SET_ID     extract specific log data and display to console
  -e            with -x, show files with errors during backup
  -m            with -x, show modified files in backup
  -a            with -x, show added files in backup
  -d SET_ID     delete backup set data from log file (reduces log size)
  -p N          prune log keeping N most recent backup sets log data
  -v            verbose - show extra debugging messages (must be first opt)
  -V            show version
  -h            show help

Only one of -e/-m/-a can be used at a time.

USAGE
}

# print a thing if verbose is enabled
# $1 - string to print
dbg_print()
{
    local msg
    msg="$1"
    if [ "${verbose}" -eq 1 ]
    then
        echo "${msg}"
    fi
}

# determine where to look for configuration stuff
# order of precedence
# - BS_SCRIPTS_CONFIG - user defines in the environment, use this if defined
# - CWD - if starting dir contains bs-repo.cfg, use that for config
# - XDG_CONFIG_HOME/bs-scipts - if defined use this location
# - ~/.config/bs-scripts - look here by default if nothing else defined
# - script dir - final fallback
#
# sets BS_SCRIPTS_CONFIG and REPO_CONFIG_FILE
get_config()
{
    dbg_print "Determining configuration files location ..."
    if [ -n "${BS_SCRIPTS_CONFIG}" ]
    then
        # preferred config dir is in the env
        dbg_print "Using user defined BS_SCRIPTS_CONFIG as config location"
    elif [ -f "bs-repo.cfg" ]
    then
        # found a repo config in the current dir, use that
        BS_SCRIPTS_CONFIG="$(pwd)"
        dbg_print "Using current directory for configuration"
    elif [ -n "${XDG_CONFIG_HOME}" ] && [ -f "${XDG_CONFIG_HOME}/bs-scripts/bs-repo.cfg" ]
    then
        # XDG_CONFIG_HOME exists, so if repo config is there, use that
        BS_SCRIPTS_CONFIG="${XDG_CONFIG_HOME}/bs-scripts"
        dbg_print "Using XDG_CONFIG_HOME for configuration"
    elif [ -f "${HOME}/.config/bs-scripts/bs-repo.cfg" ]
    then
        # found repo config in ~/.config ...
        BS_SCRIPTS_CONFIG="$(realpath "${HOME}")/.config/bs-scripts"
        dbg_print "Using local config"
    else
        # try the scripts dir
        BS_SCRIPTS_CONFIG="$(realpath "${SCRIPT_DIR}")"
        dbg_print "Using scripts dir"
    fi

    dbg_print "I think my configuration is here:"
    dbg_print "[${BS_SCRIPTS_CONFIG}]"
    REPO_CONFIG_FILE="${BS_SCRIPTS_CONFIG}/bs-repo.cfg"
    if [ -f "${REPO_CONFIG_FILE}" ]
    then
        dbg_print "Using config: ${REPO_CONFIG_FILE}"
    else
        echo "I could not find configuration file:"
        echo "[${REPO_CONFIG_FILE}]"
        exit 1
    fi

    # get the log file config from repo config file
    # REPO_CONFIG_FILE is known to exist at this point
    . "${REPO_CONFIG_FILE}"
    if [ -z "${BS_LOG_PATH}" ]
    then
        echo "BS_LOG_PATH is not defined"
        exit 1
    else
        dbg_print "Using BS_LOG_PATH: ${BS_LOG_PATH}"
    fi
    if [ -z "${BS_LOG_FILE}" ]
    then
        echo "BS_LOG_FILE is not defined"
        exit 1
    else
        dbg_print "Using BS_LOG_FILE: ${BS_LOG_FILE}"
    fi
}

# scan log for start markers, echo to console
# $1 - log file path/file
list_backups()
{
    local set_id=1
    local logfile="$1"

    while read -r logline
    do
        case "${logline}" in
            *+++BACKUP*)
                echo "${set_id}: ${logline}"
                set_id=$((set_id + 1))
                ;;
            *)
                ;;
        esac
    done < "${logfile}"
}

# copy log to tmp file, except lines which match requested backup number
# after tmp file is finished, copy back to main log file
# $1 - log file path/file
# $2 - requested set
delete_backup()
{
    local requested_set="$2"
    local set_id=0
    local logfile="$1"

    echo "DELETE: ${requested_set}"
    echo "logfile: ${logfile}"

    while read -r logline
    do
        case "${logline}" in
            *+++BACKUP*)
                # count backup sets while scanning through log file
                set_id=$((set_id + 1))
                if [ "${set_id}" -eq "${requested_set}" ]
                then
                    echo "Deleting: ${logline}"
                else
                    echo "Keeping:  ${logline}"
                fi
                ;;
            *)
                ;;
        esac
        # if the current set does not match the requested the copy it out
        # (keep the wanted sets)
        # if this is the requested set then nothing is copied,
        # so those line are "deleted"
        if [ "${set_id}" -ne "${requested_set}" ]
        then
            echo "${logline}" >> "${logfile}.tmp"
        fi
    done < "${logfile}"
    cp "${logfile}.tmp" "${logfile}"
    rm "${logfile}.tmp"
}

# make a "backup" copy of the backup log
# $1 - log file path/file
save_log()
{
    local logfile="$1"
    cp "${logfile}" "${logfile}.0"
}

# remove all but the last N backups from the log
# $1 - log file path/file
# $2 - number remaining
prune_backup()
{
    local set_id=$((0 - $2))
    local logfile="$1"

    # count number of backup sets in the log
    while read -r logline
    do
        case "${logline}" in
            *+++BACKUP*)
                set_id=$((set_id + 1))
                ;;
            *)
                ;;
        esac
    done < "${logfile}"
    # set_id has the number of backups that need to be deleted
    # delete 0 first to get rid of any leading cruft
    delete_backup "${logfile}" 0
    # delete first backup for as many as needed
    # this is inefficent and should be improved, but works
    while [ "${set_id}" -gt 0 ]
    do
        delete_backup "${logfile}" 1
        set_id=$((set_id - 1))
    done
}

# extract data about a backup, with various options
# $1 - log file path/file
# $2 is the set number to extract (numbers from -l)
# $3 is a filter value
# * a - print lines of added files
# * m - print lines of modified files
# * e - print lines of error files
# * s - print just a summary of the backup set
extract_backup()
{
    local logfile="$1"
    local requested_set="$2"
    local filter="$3"
    local set_id=1
    local extracting=0
    local summarize=0
    local countA=0
    local countE=0
    local countM=0

    # IFS is used here to preserve the spacing in the summary table at the
    # end of the borg log
    IFS=''
    while read -r logline
    do
        # looking for the backup set to extract
        if [ "${extracting}" -eq 0 ]
        then
            case "${logline}" in
                *+++BACKUP*)
                    if [ "${set_id}" -eq "${requested_set}" ]
                    then
                        extracting=1
                        echo "${logline}"
                    else
                        set_id=$((set_id + 1))
                    fi
                    ;;
                *)
                    ;;
            esac
        # backup set is found so extract data from the log file
        else
            case "${logline}" in
                *+++BACKUP*)
                    echo "Unexpected end of backup set log data"
                    echo "${logline}"
                    return 0
                    ;;
                *---COMPACTING*)
                    # catch the end of the backup we are extracting
                    echo "${logline}"
                    # if filter "s" print summary counts of each kind of file
                    if [ "${filter}" = "s" ]
                    then
                        echo "================="
                        echo "Added:      ${countA}"
                        echo "Modified:   ${countM}"
                        echo "Errors:     ${countE}"
                        echo "================="
                    fi
                    # done with extract so exit
                    return 0
                    ;;
                A\ /*)
                    # sum added files, and print if filter "a" or no filter
                    countA=$((countA + 1))
                    if [ "${filter}" = "a" ] || [ "${filter}" = "" ]
                    then
                        echo "${logline}"
                    fi
                    ;;
                E\ /*)
                    # sum error files, and print if filter "e" or no filter
                    countE=$((countE + 1))
                    if [ "${filter}" = "e" ] || [ "${filter}" = "" ]
                    then
                        echo "${logline}"
                    fi
                    ;;
                M\ /*)
                    # sum modified files, and print if filter "m" or no filter
                    countM=$((countM + 1))
                    if [ "${filter}" = "m" ] || [ "${filter}" = "" ]
                    then
                        echo "${logline}"
                    fi
                    ;;
                --------*)
                    # catch the beginning of the summary section
                    # if filter "s" then echo remaining lines to console
                    if [ "${filter}" = "s" ]
                    then
                        summarize=1
                    elif [ "${filter}" = "" ]
                    then
                        echo "${logline}"
                    fi
                    ;;
                *)
                    # if no filter, then just print all the lines
                    if [ "${filter}" = "" ]
                    then
                        echo "${logline}"
                    fi
                    ;;
            esac
        fi
        # once summarize is turned on, echo all remaining lines, which is
        # the trailing summary from borg
        if [ "${summarize}" -eq 1 ]
        then
            echo "${logline}"
        fi
    done < "${logfile}"
}

# process command line
# if no options are passed at all, then show help
if [ $# = 0 ]
then
    usage
    exit 0
fi

# support --help since that is common
if [ "$1" = "--help" ]
then
    usage
    exit 0
fi

do_extract=0

while getopts ":lx:emad:p:s:hvV" opt; do
    case ${opt} in
        h)
            usage
            exit 0
            ;;
        V)
            echo "bs-logs from bs-scripts package ${VER}"
            echo "https://github.com/kroesche/bs-scripts"
            exit 0
            ;;
        v)
            verbose=1
            ;;
        l)
            get_config
            list_backups "${BS_LOG_PATH}/${BS_LOG_FILE}"
            exit 0
            ;;
        d)
            get_config
            save_log "${BS_LOG_PATH}/${BS_LOG_FILE}"
            delete_backup "${BS_LOG_PATH}/${BS_LOG_FILE}" "${OPTARG}"
            exit 0
            ;;
        x)
            do_extract=${OPTARG}
            ;;
        e)
            filter="e"
            ;;
        m)
            filter="m"
            ;;
        a)
            filter="a"
            ;;
        s)
            do_extract=${OPTARG}
            filter="s"
            ;;
        p)
            get_config
            save_log "${BS_LOG_PATH}/${BS_LOG_FILE}"
            prune_backup "${BS_LOG_PATH}/${BS_LOG_FILE}" "${OPTARG}"
            exit 0
            ;;
        :)
            echo "Option -${OPTARG} requires an argument"
            exit 1
            ;;
        ?)
            echo "Invalid option: -${OPTARG}"
            exit 1
            ;;
        *)
            echo "getopts error"
            exit 1
            ;;
    esac
done

# determine config file locations
get_config

if [ "${do_extract}" -ne 0 ]
then
    extract_backup "${BS_LOG_PATH}/${BS_LOG_FILE}" "${do_extract}" "${filter}"
fi

exit 0
