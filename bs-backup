#!/bin/sh
#
# SPDX-License-Identifier: MIT
#
# Copyright 2024-2025 Joseph Kroesche
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# many parts of this script are lifted from borgbackup help docs

VER="0.3"
_fullpath="$(realpath "$0")"
SCRIPT_DIR="$(dirname "${_fullpath}")"

verbose=0
gendir=""

usage()
{
    echo ""
    echo "Usage:"
    echo "  bs-backup -b SET_NAME [-n compact] [-n prune]"
    echo "  bs-backup -t SET_NAME"
    echo "  bs-backup -g ( env | xdg | cwd | config | script )"
    echo "  bs-backup -l"
    echo "  bs-backup -v"
    echo "  bs-backup -V"
    echo "  bs-backup -h"
    echo ""
    echo "Options:"
    echo "  -b SET_NAME   backup the configuration named SET_NAME"
    echo "  -t SET_NAME   dry-run backup of SET_NAME"
    echo "  -n prune      skip prune operation"
    echo "  -n compact    skip compact operation"
    echo "  -g            generate config script templates ..."
    echo "     env        in BS_SCRIPTS_CONFIG"
    echo "     xdg        in XDG_CONFIG_HOME/bs-scripts"
    echo "     cwd        in the current directory"
    echo "     config     in ~/.config/bs-scripts"
    echo "     script     in the directory containing this script"
    echo "  -l            list available backup set configurations"
    echo "  -v            verbose - show extra debugging messages"
    echo "  -V            show version"
    echo "  -h            show help"
    echo ""
}

info()
{
    printf "%s %s\n" "$( date || true )" "$*" >&2;
}

# print a thing if verbose is enabled
# $1 - string to print
dbg_print()
{
    local msg
    msg="$1"
    if [ ${verbose} -eq 1 ]
    then
        echo "${msg}"
    fi
}

# determine where to look for configuration stuff
# order of precedence
# - BS_SCRIPTS_CONFIG - user defines in the environment, use this if defined
# - CWD - if starting dir contains bs-repo.cfg, use that for config
# - XDG_CONFIG_HOME/bs-scipts - if defined use this location
# - ~/.config/bs-scripts - look here by default if nothing else defined
# - script dir - final fallback
get_config()
{
    dbg_print "Determining configuration files location ..."
    if [ -n "${BS_SCRIPTS_CONFIG}" ]
    then
        # preferred config dir is in the env
        dbg_print "Using user defined BS_SCRIPTS_CONFIG as config location"
    elif [ -f "bs-repo.cfg" ]
    then
        # found a repo config in the current dir, use that
        BS_SCRIPTS_CONFIG="$(pwd)"
        dbg_print "Using current directory for configuration"
    elif [ -n "${XDG_CONFIG_HOME}" ] && [ -f "${XDG_CONFIG_HOME}/bs-scripts/bs-repo.cfg" ]
    then
        # XDG_CONFIG_HOME exists, so if repo config is there, use that
        BS_SCRIPTS_CONFIG="${XDG_CONFIG_HOME}/bs-scripts"
        dbg_print "Using XDG_CONFIG_HOME for configuration"
    elif [ -f "~/.config/bs-scripts/bs-repo.cfg" ]
    then
        # found repo config in ~/.config ...
        BS_SCRIPTS_CONFIG=$(realpath "~/.config/bs-scripts")
        dbg_print "Using local config"
    else
        # try the scripts dir
        BS_SCRIPTS_CONFIG="$(realpath ${SCRIPT_DIR})"
        dbg_print "Using scripts dir"
    fi

    dbg_print "I think my configuration is here:"
    dbg_print "[${BS_SCRIPTS_CONFIG}]"
    REPO_CONFIG_FILE="${BS_SCRIPTS_CONFIG}/bs-repo.cfg"
    if [ -f "${REPO_CONFIG_FILE}" ]
    then
        dbg_print "Using config: ${REPO_CONFIG_FILE}"
    else
        echo "I could not find configuration file:"
        echo "[${REPO_CONFIG_FILE}]"
        exit 1
    fi
}

# generate template config files
# $1 - location
#      - env - use BS_SCRIPTS_CONFIG
#      - xdg - use XDG_CONFIG_HOME/bs-scripts
#      - cwd - use CWD
#      - config - use ~/.config/bs-scripts
#      - script - use script dir
#
generate_configs()
{
    local loc configdir
    loc="$1"

    if [ "${loc}" = "env" ]
    then
        if [ -n "${BS_SCRIPTS_CONFIG}" ]
        then
            configdir="${BS_SCRIPTS_CONFIG}"
        else
            echo "you specified 'env' but BS_SCRIPTS_CONFIG is not defined"
            exit 1
        fi
    elif [ "${loc}" = "xdg" ]
    then
        if [ -n "${XDG_CONFIG_HOME}" ]
        then
            configdir="${XDG_CONFIG_HOME}/bs-scripts"
            mkdir -p "${configdir}" || { echo "could not create ${configdir}"; exit 1; }
        else
            echo "you specified 'xdg' but XDG_CONFIG_HOME is not defined"
            exit 1
        fi
    elif [ "${loc}" = "cwd" ]
    then
        configdir=$(realpath $(pwd))
    elif [ "${loc}" = "config" ]
    then
        configdir="$(dirname ${HOME}/.config/bs-scripts/x)"
        mkdir -p "${configdir}" || { echo "could not create ${configdir}"; exit 1; }
    elif [ "${loc}" = "script" ]
    then
        configdir="${SCRIPT_DIR}"
    else
        echo "unrecognized config location: ${loc}"
        exit 1
    fi

    dbg_print "Using config dir: ${configdir}"

    # BS-REPO.CFG

    if [ -f "${configdir}/bs-repo.cfg" ]
    then
        echo "NOT GENERATING: ${configdir}/bs-repo.cfg because it already exists."
    else
        cat <<BSREPOCFG > "${configdir}/bs-repo.cfg"
# Generated Template bs-repo.cfg for bs-scripts
# Modify this file for your setup
#
# REPO
#
# BORG_REPO is the path to your borg repository, local or remote
# below is an example Hetnzer storage box path
#
# fix up the URL and uncomment

# export BORG_REPO=ssh://uxxxxxx@uxxxxxx.your-storagebox.de:23/./backups/\$(hostname -s)

# one of BORG_PASSPHRASE or BORG_PASSCOMMAND should be defined
# see the borg docs
#
# example PASSPHRASE from borg docs

# export BORG_PASSPHRASE='XYZl0ngandsecurepa_55_phrasea&&123'

# example PASSCOMMAND for repo passphrase stored in mac keychain

# export BORG_PASSCOMMAND="security find-generic-password -a \$USER -s borg-\$(hostname -s)-passphrase -w"

# if you want to create the password for mac keychain, you can do something
# like this:
#
#    security add-generic-password -a \$USER -s borg-\$(hostname -s)-passphrase -w 'your_password_here'
#
# You only have to do that once and then the password is stored in your Mac
# keychain. However it would be a good idea to also store that same password in
# your password manager (if it's not keychain).
#
# Be aaware that if you type your password in the clear as in above, it may be
# stored in your shell history file (~/.bash_history). So be sure and delete
# that out of your history or supply the password using another method.
#
# LOGS
#
# This section defines where log files are created. Log files are created when
# a backup runs under the agent, which is set up using 'bs-agent'.
# The logs can be viewed with 'bs-logs'.
#
# Fix up the path and file name as needed and uncomment. This example below
# is probably what you need for MacOS

# export BS_LOG_PATH="\${HOME}/Library/Logs"
# export BS_LOG_FILE="bs-backup.log"
#
# VERIFY
#
# This section defines where verify data sets metadata are stored.
# This is used by the bs-verify script. When you use bs-verify, information
# about the backup set is stored at this location.
#
# Fix up the path as needed and uncomment.
#
# export BS_VERIFY_CFG_PATH="\${HOME}/.local/share/bs-scripts"
BSREPOCFG
        echo "Generated: ${configdir}/bs-repo.cfg"
    fi

    # BS-COMMON-EXCLUDE.CFG

    if [ -f "${configdir}/bs-exclude-common.cfg" ]
    then
        echo "NOT GENERATING: ${configdir}/bs-exclude-common.cfg because it already exists."
    else
        cat <<BSEXCLUDE > "${configdir}/bs-exclude-common.cfg"
# Generated template bs-exclude-common.cfg for bs-scripts
# Modify this file for your setup
#
# This is a list of exclude patterns/files that should apply to all backups
# See the borg documentation for the exclude format
#
sh:**/venv
*/Downloads*
*/Automatically*
*/.DS_*
*/.DocumentRevisions*
*/Spotlight*
*/TemporaryItems
*/.Trashes
*/.fseventsd
*/tmp
*/temp
*/cache*
*/Cache*
*/.cache
*/.Trash
*/Logs
*/.MobileBackups*
*/MobileBackups*
BSEXCLUDE
        echo "Generated: ${configdir}/bs-exclude-common.cfg"
    fi

    # BS-SET-EXAMPLE.CFG

    if [ -f "${configdir}/bs-set-example.cfg" ]
    then
        echo "NOT GENERATING: ${configdir}/bs-set-example.cfg because it already exists."
    else
        cat <<BSSETEXAMPLE > "${configdir}/bs-set-example.cfg"
# Generated template bs-set-example.cfg for bs-scripts
# Modify this file or make new copies for your setup
#
# This file defines a backup set. You can have more than one of these kind of
# files. They should be named 'bs-set-name.cfg' where 'name' is the name of
# the backup set.
#
# bs-backup backup set configuration file
#
# optional description. can be left empty.
# use a very short string, it will be shown when backup configs are listed
#
BACKUP_SET_DESCRIPTION="Example backup set"

# BACKUP_CUSTOM_FLAGS is mainly used to list paths/patterns to exclude for
# this backup set. It does not need to list the common exclusions, just
# exclusions unique to this backup set.
#
# See the borg docs for how to specify the patterns. But they often look like
# this:
#     */foobar*
#
# It can be empty if there are no special exclusions.
# It can also include other borg flags if needed.
# This example shows excluding two paths.
#
BACKUP_CUSTOM_FLAGS="--exclude 'bs-repo.cfg' --exclude '*/.git'"

# BACKUP_SOURCE PATHS must have at least one path. it can have more than one
# path, space separated, or on separate lines as described above. Normally this
# should be a full path, such as:
#     BACKUP_SOURCE_PATHS="/Users/joe/Documents"
#
# In this example, it just uses the current directory so that you can use it to
# do an example backup of this directory.
#
BACKUP_SOURCE_PATHS="."
BSSETEXAMPLE
        echo "Generated: ${configdir}/bs-set-example.cfg"
    fi
}

# list all the available backup configuration
# configuration is established before this is called
list()
{
    local cwd
    cwd="$(pwd)"
    cd "${BS_SCRIPTS_CONFIG}"
    echo ""
    echo "Available backup configurations"
    echo "-------------------------------"
    for cfg in bs-set-*
    do
        BACKUP_SET_DESCRIPTION=""
        . ./"${cfg}"
        setname=$(echo "${cfg}" | sed -E "s/bs-set-(.*)\.cfg/\1/")
        printf "%-16s %s\n" "${setname}" "${BACKUP_SET_DESCRIPTION}"
    done
    echo ""
    cd "${cwd}" || { echo "Could not cd to ${cwd}"; exit 1; }
}

trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

# initialize prune and compact defaults
doprune=1
docompact=1

# process command line
# if no options are passed at all, then show help
if [ $# = 0 ]
then
    usage
    exit 0
fi

# support --help since that is common
if [ "$1" = "--help" ]
then
    usage
    exit 0
fi

# otherwise, process the options
# this does not do a lot of cross checking of options so it is possible
# to specify nonsense set of options
while getopts ":lvVhb:t:n:g:" opt; do
    case ${opt} in
        h)
            usage
            exit 0
            ;;
        V)
            echo "bs-backup from bs-scripts package ${VER}"
            echo "https://github.com/kroesche/bs-scripts"
            exit 0
            ;;
        v)
            verbose=1
            ;;
        l)
            action="list"
            ;;
        b)
            if [ "${action}" = "test" ]
            then
                info "you cannot request both -b and -t"
                exit 1
            fi
            action="backup"
            setname=${OPTARG}
            info "requested backup of set: ${setname}"
            ;;
        t)
            if [ "${action}" = "backup" ]
            then
                info "you cannot request both -b and -t"
                exit 1
            fi
            action="test"
            setname=${OPTARG}
            info "requested dry-run of set: ${setname}"
            ;;
        n)
            if [ "${OPTARG}" = "prune" ]
            then
                doprune=0
                info "requested skip pruning"
            elif [ "${OPTARG}" = "compact" ]
            then
                docompact=0
                info "requested skip compacting"
            fi
            ;;
        g)
            gendir=${OPTARG}
            generate_configs "${gendir}"
            exit 0
            ;;
        :)
            echo "Option -${OPTARG} requires an argument"
            exit 1
            ;;
        ?)
            echo "Invalid option: -${OPTARG}"
            exit 1
            ;;
        *)
            echo "getopts error"
            exit 1
            ;;
    esac
done

# remaining commands require access to configuration file
get_config

if [ "${action}" = "list" ]
then
    list
    exit 0
fi

# determine command action
# --stats and --dry-run are not compatible switches for borg
if [ "${action}" = "backup" ]
then
    action_switch="--stats"
    filter="--filter AME"
elif [ "${action}" = "test" ]
then
    action_switch="--dry-run"
    filter=""
else
    info "bad command: ${action}"
    usage
    exit 1
fi

info "bs-backup script started"

# determine the path to the borg executable
# BORGBIN environment variable can be used to pass in the path.
# If it is not defined then just assume it is on the path.
# The reason to do this is because when run under launchctl (for automated
# backups on mac) the PATH is very limited and doesnt include any 'local'
# paths or package managers. This allows the path to borg to be specified
# from the launch agent.
if [ -z "${BORGBIN}" ]
then
    info "using borg executable from PATH"
    BORG=borg
else
    info "using borg executable from BORGBIN"
    info "(${BORGBIN})"
    BORG=${BORGBIN}
fi

if ! command -v "${BORG}" >/dev/null 2>&1
then
    info "could not find borg executable using: ${BORG}"
    exit 1
fi

info "using set name: ${setname}, action: ${action}"

# determine configuration files
#
# REPO_CONFIG_FILE was set by get_config already
#
# BS_SCRIPTS_CONFIG is the path where all the other config files should be

# common exclude is a list of files/folders to exclude using the borg
# pattern style. one exclusion per line in the file
#
# make sure there is at least a default file present in the config
COMMON_EXCLUDE_FILE="${BS_SCRIPTS_CONFIG}/bs-exclude-common.cfg"
if [ ! -f "${COMMON_EXCLUDE_FILE}" ]
then
    info "No exclude file found: ${COMMON_EXCLUDE_FILE}"
    exit 1
fi

# set_config is the config file for the specific backup set
# it is of the form:
#
# BACKUP_CUSTOM_FLAGS="--exclude '*/pattern1' --exclude '*/pattern2' <other custom flags/configs>"
# BACKUP_SOURCE_PATHS="<backup-path1> <backuppath2>"
#
# where:
# * variable values should be in quotes
# * make sure there is a space between switches
# * BACKUP_CUSTOM_FLAGS is mostly --exclude patterns but other borg
# * flags can be added
# * BACKUP_CUSTOM_FLAGS can be empty
# * common exclude paths do not need to be repeated, only extra includes for
#   this specific backup set
# * BACKUP_SOURCE_PATHS must have at least one path, but can have more than one
# * the file can have comments on lines by themselves
#
SET_CONFIG_FILE="${BS_SCRIPTS_CONFIG}/bs-set-${setname}.cfg"

# make sure backup set is valid based on existence of a config file
if [ -f "${SET_CONFIG_FILE}" ]
then
    # read in (source) the custom backup variables
    . "${SET_CONFIG_FILE}"
else
    info "No config file found for backup set: ${SET_CONFIG_FILE}"
    exit 1
fi

if [ -n "${BACKUP_CUSTOM_FLAGS}" ]
then
    info "BACKUP_CUSTOM_FLAGS ..."
    info "${BACKUP_CUSTOM_FLAGS}"
else
    echo "BACKUP_CUSTOM_FLAGS is not defined."
    echo "Something went wrong with the backup set config file."
    exit 1
fi

if [ -n "${BACKUP_SOURCE_PATHS}" ]
then
    info "BACKUP_SOURCE_PATHS ..."
    info "${BACKUP_SOURCE_PATHS}"
else
    echo "BACKUP_SOURCE_PATHS is not defined."
    echo "Something went wrong with the backup set config file."
    exit 1
fi

# validate and source the repo credentials
if [ -f "${REPO_CONFIG_FILE}" ]
then
    . "${REPO_CONFIG_FILE}"
else
    info "No repo config file found: ${REPO_CONFIG_FILE}"
    exit 1
fi

if [ -n "${BORG_REPO}" ]
then
    info "BORG_REPO ..."
    info "${BORG_REPO}"
else
    echo "BORG_REPO is not defined."
    echo "Something went wrong with the configuration file load."
    exit 1
fi

info "BORG_PASS... is not shown for security"

# to get quoting, and paths with spaces being included from the 'set' files,
# I had to use xargs to get all the command line args expanded correctly to be
# passed to borg. there is probably a better way to do this, but it works on
# my mac
#
# assemble all the common and custom command line args into one variable
ARCHIVE="${BORG_REPO}::{hostname}-${setname}-{now}"
BORG_CLI_ARGS="create
--verbose --list --show-rc --compression zstd,9 --exclude-caches --exclude-nodump
${filter}
${action_switch}
--exclude-from ${COMMON_EXCLUDE_FILE}
${BACKUP_CUSTOM_FLAGS}
${ARCHIVE}
${BACKUP_SOURCE_PATHS}"

# show what will be called
info "BORG_CLI_ARGS:"
info "${BORG_CLI_ARGS}"

info "+++BACKUP: ${setname}"
# use xargs to expand args and pass to borg. this seems to work
echo "${BORG_CLI_ARGS}" | xargs "${BORG}"

backup_exit=$?

info "---BACKUP"

# if it was a test run, just exit here
if [ "${action}" = "test" ]
then
    info "End of test run"
    exit 0
fi

if [ "${doprune}" = 1 ]
then
    info "+++PRUNE"

    ${BORG} prune --list --glob-archives "{hostname}-${setname}-*" --show-rc    \
        --keep-daily 7                  \
        --keep-weekly 4                 \
        --keep-monthly 6                \
        "${BORG_REPO}"
    prune_exit=$?
    info "---PRUNE"
else
    info "skipping prune"
    prune_exit=0
fi

if [ "${docompact}" = 1 ]
then
    info "+++COMPACTING"

    ${BORG} compact "${BORG_REPO}"
    compact_exit=$?
    info "---COMPACTING"
else
    info "skipping compact"
    compact_exit=0
fi

global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))
global_exit=$(( compact_exit > global_exit ? compact_exit : global_exit ))

if [ "${global_exit}" -eq 0 ]; then
    info "Backup, Prune, and Compact finished successfully"
elif [ "${global_exit}" -eq 1 ]; then
    info "Backup, Prune, and/or Compact finished with warnings"
else
    info "Backup, Prune, and/or Compact finished with errors"
fi

exit "${global_exit}"
